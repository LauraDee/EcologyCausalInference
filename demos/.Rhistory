set.seed(456)
data <- tibble(
student_id = 1:1000,
treated_real = sample(0:1, 1000, replace = TRUE),  # Real treatment
treated_placebo = sample(0:1, 1000, replace = TRUE),  # Fake treatment
pre_score = rnorm(1000, 50, 10),  # Pre-treatment test scores
post_score = pre_score + treated_real * 5 + rnorm(1000, 0, 3)  # Treatment adds 5 points on avg
)
library(tidyverse)
library(lmtest)
set.seed(123)
data <- tibble(
state = rep(1:50, each = 10),
year = rep(2009:2018, times = 50),
treated = ifelse(state <= 25, 1, 0), # 25 treated states
post_treatment = ifelse(year >= 2018, 1, 0), # Policy starts in 2018
employment = rnorm(500, mean = 100, sd = 10) - 2 * treated * post_treatment # Simulated policy effect
)
model_actual <- lm(employment ~ treated * post_treatment + factor(state) + factor(year), data = data)
summary(model_actual)
data$placebo_post <- ifelse(data$year >= 2016, 1, 0)
model_placebo <- lm(employment ~ treated * placebo_post + factor(state) + factor(year), data = data)
summary(model_placebo)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
data <- tibble(
state = rep(1:50, each = 10),
year = rep(2009:2018, times = 50),
treated = ifelse(state <= 25, 1, 0), # 25 treated states
post_treatment = ifelse(year >= 2018, 1, 0), # Policy starts in 2018
employment = rnorm(500, mean = 100, sd = 10) - 2 * treated * post_treatment # Simulated policy effect
data <- tibble(
data <- tibble(
state = rep(1:50, each = 10),
year = rep(2009:2018, times = 50),
treated = ifelse(state <= 25, 1, 0), # 25 treated states
post_treatment = ifelse(year >= 2018, 1, 0), # Policy starts in 2018
employment = rnorm(500, mean = 100, sd = 10) - 2 * treated * post_treatment # Simulated policy effect
)
View(model_placebo)
View(model_placebo)
View(model_placebo)
EValue::evalue.RR(2.5, lo = 1.8, hi = 3.2)
install.packages("EValue")
library(EValue)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lmtest)
# Install and load package
install.packages("rbounds")
library(rbounds)
install.packages("EValue")
library(EValue)
install.packages("EValue")
set.seed(123)
data <- tibble(
state = rep(1:50, each = 10),
year = rep(2009:2018, times = 50),
treated = ifelse(state <= 25, 1, 0), # 25 treated states
post_treatment = ifelse(year >= 2018, 1, 0), # Policy starts in 2018
employment = rnorm(500, mean = 100, sd = 10) - 2 * treated * post_treatment # Simulated policy effect
)
model_actual <- lm(employment ~ treated * post_treatment + factor(state) + factor(year), data = data)
summary(model_actual)
# Placebo Test: Using 2016 as the fake treatment year
data$placebo_post <- ifelse(data$year >= 2016, 1, 0)
model_placebo <- lm(employment ~ treated * placebo_post + factor(state) + factor(year), data = data)
summary(model_placebo)
ggplot(data, aes(x = year, y = employment, color = as.factor(treated))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~treated) +
labs(title = "Employment Trends Before and After Policy",
x = "Year", y = "Employment Level",
color = "Treatment Group")
set.seed(456)
data <- tibble(
student_id = 1:1000,
treated_real = sample(0:1, 1000, replace = TRUE),  # Real treatment
treated_placebo = sample(0:1, 1000, replace = TRUE),  # Fake treatment
pre_score = rnorm(1000, 50, 10),  # Pre-treatment test scores
post_score = pre_score + treated_real * 5 + rnorm(1000, 0, 3)  # Treatment adds 5 points on avg
)
model_real <- lm(post_score ~ treated_real + pre_score, data = data)
summary(model_real)
# Placebo test: Fake treatment group
model_placebo <- lm(post_score ~ treated_placebo + pre_score, data = data)
summary(model_placebo)
set.seed(456)
# Generate simulated data
data <- tibble(
student_id = 1:1000,
treated_real = sample(0:1, 1000, replace = TRUE),  # True treatment assignment
treated_placebo = sample(0:1, 1000, replace = TRUE),  # Fake (random) treatment
pre_score = rnorm(1000, 50, 10),  # Pre-treatment test scores
post_score = pre_score + treated_real * 5 + rnorm(1000, 0, 3)  # True treatment adds 5 points
)
model_placebo <- lm(post_score ~ treated_placebo + pre_score, data = data)
summary(model_placebo)
ggplot(data, aes(x = pre_score, y = post_score, color = as.factor(treated_placebo))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Placebo Test: Fake Treatment vs. Test Scores",
x = "Pre-Test Score", y = "Post-Test Score",
color = "Fake Treatment Group")
EValue::evalue.RR(2.5, lo = 1.8, hi = 3.2)
set.seed(111)
scholarship <- sample(0:1, 500, replace = TRUE)
enrollment <- scholarship + rnorm(500, 0, 1)
# Wilcoxon signed-rank test for matching
psens(enrollment, scholarship, Gamma = 2)  # G
set.seed(789)
data <- tibble(
patient_id = 1:500,
treated = sample(0:1, 500, replace = TRUE),
age = rnorm(500, 50, 10),
bmi = rnorm(500, 25, 4),
blood_pressure = 120 - treated * 5 + rnorm(500, 0, 5)  # Drug reduces BP by 5 units
)
# Model 1: Basic regression
model1 <- lm(blood_pressure ~ treated, data = data)
summary(model1)
# Model 2: Controlling for age
model2 <- lm(blood_pressure ~ treated + age, data = data)
summary(model2)
# Model 3: Controlling for age and BMI
model3 <- lm(blood_pressure ~ treated + age + bmi, data = data)
summary(model3)
install.packages("rbounds")
install.packages("rbounds")
install.packages("EValue")
install.packages("EValue")
EValue::evalue.RR(2.5, lo = 1.8, hi = 3.2)
# Install the package (only run this once)
if (!requireNamespace("EValue", quietly = TRUE)) {
install.packages("EValue")
}
# Load the package
library(EValue)
evalue.RR(estimate = 2.5, lo = 1.8, hi = 3.2)
install.packages("EValue", dependencies = TRUE)
install.packages("EValue", dependencies = TRUE)
EValue::evalue.RR(estimate = 2.5, lo = 1.8, hi = 3.2)
evalue.RR(estimate = 2.5, lo = 1.8, hi = 3.2)
?Evalue
??Evalue
installed.packages()["EValue", ]
library(EValue)
ls("package:EValue")
EValue::evalues.RR(estimate = 2.5, lo = 1.8, hi = 3.2)
EValue::evalues.RR(est = 2.5, lo = 1.8, hi = 3.2)
EValue::evalues.RR(2.5, lo = 1.8, hi = 3.2)
help(package = "EValue")
RR <- 2.5  # Estimated risk ratio
E_value <- RR + sqrt(RR * (RR - 1))
E_value
library(sensemakr)
# Set seed for reproducibility
set.seed(123)
# Simulate data: Job training impact on wages
n <- 500
training <- rbinom(n, 1, 0.5)  # 50% received training
education <- rnorm(n, mean = 12, sd = 2)  # Avg. 12 years of education
experience <- rnorm(n, mean = 5, sd = 2)  # Avg. 5 years of experience
wages <- 20 + 3 * training + 2 * education + 1.5 * experience + rnorm(n, sd = 5)  # Wage equation
# Create data frame
data <- data.frame(wages, training, education, experience)
# Fit linear regression model
model <- lm(wages ~ training + education + experience, data = data)
# Display model summary
summary(model)
# Perform sensitivity analysis with sensemakr
sensitivity <- sensemakr(
model = model,
treatment = "training",
benchmark_covariates = c("education", "experience"),  # Use observed confounders as benchmarks
q = 1,  # Assess robustness to omitted variable bias
alpha = 0.05  # Significance level
)
# Print sensitivity analysis summary
summary(sensitivity)
# Plot sensitivity results
plot(sensitivity)
```
# Set seed for reproducibility
set.seed(123)
Simulate data: Job training impact on wages
n <- 500
training <- rbinom(n, 1, 0.5)  # 50% received training
education <- rnorm(n, mean = 12, sd = 2)  # Avg. 12 years of education
experience <- rnorm(n, mean = 5, sd = 2)  # Avg. 5 years of experience
wages <- 20 + 3 * training + 2 * education + 1.5 * experience + rnorm(n, sd = 5)  # Wage equation
# Create data frame
data <- data.frame(wages, training, education, experience)
# Fit linear regression model
model <- lm(wages ~ training + education + experience, data = data)
# Display model summary
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(MatchIt)
library(rbounds)
# Compute differences
diff_outcomes <- treated_outcomes - control_outcomes
?psens
# Perform Rosenbaum sensitivity analysis
psens(x = treated_outcomes, y = control_outcomes, Gamma = 1.5)  # Adjust Gamma to test sensitivity
library(ggplot2)
library(dplyr)
library(rdd)
library(rddtools)
n <- 500
distance <- runif(n, -50, 50)  # Running variable: distance from fire edge
diversity_control <- 50 + 0.5 * distance + rnorm(n, sd = 5)  # Control group trend
diversity_treated <- 30 + 0.3 * distance + rnorm(n, sd = 5)  # Treated group trend
treatment <- ifelse(distance < 0, 1, 0)  # Treatment assignment at fire edge
diversity <- ifelse(treatment == 1, diversity_treated, diversity_control)
data <- data.frame(distance, treatment, diversity)
ggplot(data, aes(x = distance, y = diversity, color = factor(treatment))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Effect of Forest Fire on Insect Diversity",
x = "Distance from Fire Edge (meters)",
y = "Insect Diversity Index",
color = "Treatment")
rdd_object <- rdd_data(y = diversity, x = distance, cutpoint = 0)
rdd_result <- rdd_reg_lm(rdd_object)
summary(rdd_result)
treatment_fuzzy <- ifelse(distance < 0, rbinom(n, 1, 0.8), rbinom(n, 1, 0.2))
diversity_fuzzy <- ifelse(treatment_fuzzy == 1, diversity_treated, diversity_control)
data_fuzzy <- data.frame(distance, treatment_fuzzy, diversity_fuzzy)
ggplot(data_fuzzy, aes(x = distance, y = diversity_fuzzy, color = factor(treatment_fuzzy))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Fuzzy RDD: Effect of Fire on Insect Diversity",
x = "Distance from Fire Edge",
y = "Insect Diversity Index",
color = "Observed Treatment")
rdd_fuzzy_object <- rdd_data(y = diversity_fuzzy, x = distance, cutpoint = 0)
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = treatment_fuzzy)
rdd_fuzzy_object <- rdd_data(y = diversity_fuzzy, x = distance, cutpoint = 0, covar = data_fuzzy[, c("vegetation_density", "soil_moisture")])
set.seed(123)
n <- 500
distance <- runif(n, -50, 50)  # Running variable: distance from fire edge
diversity_control <- 50 + 0.5 * distance + rnorm(n, sd = 5)  # Control group trend
diversity_treated <- 30 + 0.3 * distance + rnorm(n, sd = 5)  # Treated group trend
treatment <- ifelse(distance < 0, 1, 0)  # Treatment assignment at fire edge
diversity <- ifelse(treatment == 1, diversity_treated, diversity_control)
# Adding confounders
vegetation_density <- 80 - 0.6 * distance + rnorm(n, sd = 5)  # Higher closer to fire
soil_moisture <- 40 + 0.4 * distance + rnorm(n, sd = 3)  # Lower closer to fire
data <- data.frame(distance, treatment, diversity, vegetation_density, soil_moisture)
ggplot(data, aes(x = distance, y = diversity, color = factor(treatment))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Effect of Forest Fire on Insect Diversity",
x = "Distance from Fire Edge (meters)",
y = "Insect Diversity Index",
color = "Treatment")
ggplot(data, aes(x = distance, y = vegetation_density)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
theme_minimal() +
labs(title = "Vegetation Density as a Function of Distance",
x = "Distance from Fire Edge",
y = "Vegetation Density")
ggplot(data, aes(x = distance, y = soil_moisture)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "green") +
theme_minimal() +
labs(title = "Soil Moisture as a Function of Distance",
x = "Distance from Fire Edge",
y = "Soil Moisture")
rdd_object <- rdd_data(y = diversity, x = distance, cutpoint = 0, covar = data[, c("vegetation_density", "soil_moisture")])
rdd_result <- rdd_reg_lm(rdd_object)
summary(rdd_result)
treatment_fuzzy <- ifelse(distance < 0, rbinom(n, 1, 0.8), rbinom(n, 1, 0.2))  # Imperfect compliance
diversity_fuzzy <- ifelse(treatment_fuzzy == 1, diversity_treated, diversity_control)
data_fuzzy <- data.frame(distance, treatment_fuzzy, diversity_fuzzy, vegetation_density, soil_moisture)
ggplot(data_fuzzy, aes(x = distance, y = diversity_fuzzy, color = factor(treatment_fuzzy))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Fuzzy RDD: Effect of Fire on Insect Diversity",
x = "Distance from Fire Edge",
y = "Insect Diversity Index",
color = "Observed Treatment")
```
rdd_fuzzy_object <- rdd_data(y = diversity_fuzzy, x = distance, cutpoint = 0, covar = data_fuzzy[, c("vegetation_density", "soil_moisture")])
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = treatment_fuzzy)
?rdd_data
rdd_fuzzy_object <- rdd_data(y = diversity_fuzzy, x = distance, cutpoint = 0, covar = c("vegetation_density", "soil_moisture"), data = data_fuzzy)
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = treatment_fuzzy)
rdd_fuzzy_object <- rdd_data(y = diversity_fuzzy, x = distance, cutpoint = 0, covar = c("vegetation_density", "soil_moisture"), data = data_fuzzy)
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = treatment_fuzzy)
?rdd_reg_lm
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = c("vegetation_density", "soil_moisture"))
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates =NULL)
summary(rdd_fuzzy_result)
head(data_fuzzy)
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = c("vegetation_density", "soil_moisture"))
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = "vegetation_density", "soil_moisture")
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = TRUE)
summary(rdd_fuzzy_result)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(rdd)
library(rddtools)
set.seed(123)
n <- 500
distance <- runif(n, -50, 50)  # Running variable: distance from fire edge
diversity_control <- 50 + 0.5 * distance + rnorm(n, sd = 5)  # Control group trend
diversity_treated <- 30 + 0.3 * distance + rnorm(n, sd = 5)  # Treated group trend
treatment <- ifelse(distance < 0, 1, 0)  # Treatment assignment at fire edge
diversity <- ifelse(treatment == 1, diversity_treated, diversity_control)
# Adding covariates that are non-confounding within -25 to +25
distance_effect <- ifelse(abs(distance) <= 25, 0, 1)
vegetation_density <- 80 - 0.6 * distance * distance_effect + rnorm(n, sd = 5)
soil_moisture <- 40 + 0.4 * distance * distance_effect + rnorm(n, sd = 3)
data <- data.frame(distance, treatment, diversity, vegetation_density, soil_moisture)
ggplot(data, aes(x = distance, y = diversity, color = factor(treatment))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Effect of Forest Fire on Insect Diversity",
x = "Distance from Fire Edge (meters)",
y = "Insect Diversity Index",
color = "Treatment")
ggplot(data, aes(x = distance, y = vegetation_density)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
theme_minimal() +
labs(title = "Vegetation Density as a Function of Distance",
x = "Distance from Fire Edge",
y = "Vegetation Density")
ggplot(data, aes(x = distance, y = soil_moisture)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "green") +
theme_minimal() +
labs(title = "Soil Moisture as a Function of Distance",
x = "Distance from Fire Edge",
y = "Soil Moisture")
rdd_object <- rdd_data(y = diversity, x = distance, cutpoint = 0, covar = data[, c("vegetation_density", "soil_moisture")])
rdd_result <- rdd_reg_lm(rdd_object)
summary(rdd_result)
treatment_fuzzy <- ifelse(distance < 0, rbinom(n, 1, 0.8), rbinom(n, 1, 0.2))  # Imperfect compliance
diversity_fuzzy <- ifelse(treatment_fuzzy == 1, diversity_treated, diversity_control)
data_fuzzy <- data.frame(distance, treatment_fuzzy, diversity_fuzzy, vegetation_density, soil_moisture)
ggplot(data_fuzzy, aes(x = distance, y = diversity_fuzzy, color = factor(treatment_fuzzy))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Fuzzy RDD: Effect of Fire on Insect Diversity",
x = "Distance from Fire Edge",
y = "Insect Diversity Index",
color = "Observed Treatment")
rdd_fuzzy_object <- rdd_data(y = diversity_fuzzy, x = distance, cutpoint = 0, covar =  c("vegetation_density", "soil_moisture"), data = data_fuzzy)
rdd_fuzzy_result <- rdd_reg_lm(rdd_fuzzy_object, covariates = TRUE)
summary(rdd_fuzzy_result)
